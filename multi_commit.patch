From 0b967349069eceb30f56135475596d679b622035 Mon Sep 17 00:00:00 2001
From: adiptamookerjee <adipta.mookerjee@gmail.com>
Date: Sat, 6 Jan 2024 11:22:44 +0530
Subject: [PATCH 1/3] Condition added to renderGraph property to run only when
 start streaming property is clicked on

---
 src/App.tsx | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/App.tsx b/src/App.tsx
index bbd8292..4d5fca9 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -31,7 +31,8 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph)
+      return (<Graph data={this.state.data}/>)
   }
 
   /**
-- 
2.34.1


From a990e3a1d61c48f098e88848c6bf4b8549e671de Mon Sep 17 00:00:00 2001
From: adiptamookerjee <adipta.mookerjee@gmail.com>
Date: Sat, 6 Jan 2024 11:33:01 +0530
Subject: [PATCH 2/3] using the setInterval method to continuously get data
 from the server and to render the graph

---
 src/App.tsx | 55 +++++++++++++++++++++++++++++++----------------------
 1 file changed, 32 insertions(+), 23 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 4d5fca9..7e97be1 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,14 +1,14 @@
-import React, { Component } from 'react';
-import DataStreamer, { ServerRespond } from './DataStreamer';
-import Graph from './Graph';
-import './App.css';
+import React, { Component } from "react";
+import DataStreamer, { ServerRespond } from "./DataStreamer";
+import Graph from "./Graph";
+import "./App.css";
 
 /**
  * State declaration for <App />
  */
 interface IState {
-  data: ServerRespond[],
-  showGraph: boolean,
+  data: ServerRespond[];
+  showGraph: boolean;
 }
 
 /**
@@ -23,7 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
-      showGraph: false, 
+      showGraph: false,
     };
   }
 
@@ -31,19 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    if(this.state.showGraph)
-      return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) return <Graph data={this.state.data} />;
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
@@ -52,25 +61,25 @@ class App extends Component<{}, IState> {
   render() {
     return (
       <div className="App">
-        <header className="App-header">
-          Bank & Merge Co Task 2
-        </header>
+        <header className="App-header">Bank & Merge Co Task 2</header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
+          <button
+            className="btn btn-primary Stream-button"
             // when button is click, our react app tries to request
             // new data from the server.
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => {
+              this.getDataFromServer();
+            }}
+          >
             Start Streaming Data
           </button>
-          <div className="Graph">
-            {this.renderGraph()}
-          </div>
+          <div className="Graph">{this.renderGraph()}</div>
         </div>
       </div>
-    )
+    );
   }
 }
 
-- 
2.34.1


From 73af01ad1b83cffbae56c46df18e2462ea975b46 Mon Sep 17 00:00:00 2001
From: adiptamookerjee <adipta.mookerjee@gmail.com>
Date: Sat, 6 Jan 2024 12:35:40 +0530
Subject: [PATCH 3/3] using the setInterval method to get data from the server
 and to render the graph

---
 src/Graph.tsx | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..fbed588 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement  extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -31,8 +31,7 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -47,8 +46,16 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');  
+      elem.setAttribute('aggregates', `
+      {"stock":"distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"}`);
     }
   }
 
-- 
2.34.1

